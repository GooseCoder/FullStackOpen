{"version":3,"sources":["services/persons.js","Persons.js","Filter.js","PersonForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","Persons","_ref","persons","deleteHandler","react_default","a","createElement","map","person","key","name","number","onClick","Filter","filterHandler","filter","type","onChange","value","PersonForm","dataHandler","nameHandler","numberHandler","onSubmit","Notification","styles","message","style","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","setFilter","_useState9","_useState10","notificationMessage","setNotificationMessage","_useState11","_useState12","notificationStyles","setNotificationStyles","errorStyles","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","successStyles","useEffect","personService","event","target","preventDefault","find","window","confirm","updatedPerson","setTimeout","toConsumableArray","curPerson","catch","error","newPerson","toLowerCase","indexOf","console","log","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39468f5f.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove\n};\n","import React from \"react\";\n\nexport default function Persons({ persons, deleteHandler }) {\n  return (\n    <div>\n      {persons.map(person => {\n        const deletePerson = () => {\n          deleteHandler(person);\n        };\n        return (\n          <div key={person.id}>\n            {person.name} {person.number}{\" \"}\n            <button onClick={deletePerson}>delete</button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Filter({ filterHandler, filter }) {\n  return (\n    <div>\n      filter show with:\n      <input type=\"text\" onChange={filterHandler} value={filter} />\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function PersonForm({dataHandler, nameHandler, numberHandler, name, number}) {\n    return (\n        <form onSubmit={dataHandler}>\n        <div>\n          name:<input type=\"text\" onChange={nameHandler} value={name} />\n        </div>\n        <div>\n          number:<input type=\"text\" onChange={numberHandler} value={number} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n","import React from 'react'\n\nexport default function Notification({styles, message}) {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div style={styles}>\n            {message}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Persons from \"./Persons\";\nimport Filter from \"./Filter\";\nimport PersonForm from \"./PersonForm\";\nimport Notification from \"./Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [notificationStyles, setNotificationStyles] = useState({});\n\n  const errorStyles = {\n    color: \"red\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n\n  const successStyles = {\n    color: \"green\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n\n  const submitData = event => {\n    event.preventDefault();\n    const person = persons.find(person => newName === person.name);\n    if (person) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with the new one?`\n        )\n      ) {\n        personService\n          .update(person.id, {\n            name: newName,\n            number: newNumber,\n            id: person.id\n          })\n          .then(updatedPerson => {\n            setNotificationMessage(`Added ${person.name}`);\n            setNotificationStyles(successStyles);\n            setTimeout(() => {\n              setNotificationMessage(null);\n            }, 5000);\n            setPersons([\n              ...persons.filter(curPerson => curPerson.id !== person.id),\n              updatedPerson\n            ]);\n            setNewNumber(\"\");\n            setNewName(\"\");\n          })\n          .catch(error => {\n            setNotificationMessage(\n              `Information of ${\n                person.name\n              } has already been removed from server`\n            );\n            setNotificationStyles(errorStyles);\n            setTimeout(() => {\n              setNotificationMessage(null);\n            }, 5000);\n            setPersons([\n              persons.filter(curPerson => curPerson.id !== person.id)\n            ]);\n          });\n      }\n    } else {\n      personService\n        .create({\n          name: newName,\n          number: newNumber\n        })\n        .then(newPerson => {\n          setNotificationMessage(`Added ${newName}`);\n          setNotificationStyles(successStyles);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n          setPersons([...persons, newPerson]);\n          setNewNumber(\"\");\n          setNewName(\"\");\n        }).catch((error) => {\n          setNotificationMessage(error.response.data.error);\n          setNotificationStyles(errorStyles);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const changeNewName = event => {\n    setNewName(event.target.value);\n  };\n\n  const changeNewNumber = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const deletePerson = person => {\n    if (window.confirm(`Delete ${person.name}?`))\n      personService\n        .remove(person.id)\n        .then(() => {\n          setPersons(persons.filter(curPerson => curPerson.id !== person.id));\n        })\n        .catch(error => {\n          console.log('error on delete');\n          setNotificationMessage(\n            `Information of ${person.name} has already been removed from server`\n          );\n          setNotificationStyles(errorStyles);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 5000);\n          setPersons(persons.filter(curPerson => curPerson.id !== person.id));\n        });\n  };\n\n  const changeFilter = event => {\n    setFilter(event.target.value);\n  };\n\n  useEffect(() => {\n    personService.getAll().then(persons => setPersons(persons));\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification styles={notificationStyles} message={notificationMessage} />\n      <Filter filterHandler={changeFilter} filter={filter} />\n      <h2>add a new</h2>\n      <PersonForm\n        dataHandler={submitData}\n        nameHandler={changeNewName}\n        numberHandler={changeNewNumber}\n        name={newName}\n        number={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons.filter(\n          person => person.name.toLowerCase().indexOf(filter.toLowerCase()) >= 0\n        )}\n        deleteHandler={deletePerson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}